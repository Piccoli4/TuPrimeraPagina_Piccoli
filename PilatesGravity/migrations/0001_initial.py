# Generated by Django 5.2.1 on 2025-06-12 22:00

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Clase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('Reformer', 'Pilates Reformer'), ('Cadillac', 'Pilates Cadillac')], max_length=20, verbose_name='Tipo de clase')),
                ('dia', models.CharField(choices=[('Lunes', 'Lunes'), ('Martes', 'Martes'), ('Miércoles', 'Miércoles'), ('Jueves', 'Jueves'), ('Viernes', 'Viernes')], max_length=10, verbose_name='Día de la semana')),
                ('horario', models.TimeField(verbose_name='Horario')),
                ('cupo_maximo', models.PositiveIntegerField(default=10, verbose_name='Cupo máximo')),
                ('activa', models.BooleanField(default=True, help_text='Las clases inactivas no aparecerán disponibles para reservar', verbose_name='Clase activa')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Última modificación')),
            ],
            options={
                'verbose_name': 'Clase',
                'verbose_name_plural': 'Clases',
                'ordering': ['dia', 'horario', 'tipo'],
                'permissions': [('can_manage_all_classes', 'Puede gestionar todas las clases')],
                'unique_together': {('tipo', 'dia', 'horario')},
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_cliente', models.CharField(editable=False, max_length=10, unique=True)),
                ('nombre', models.CharField(error_messages={'max_length': 'El nombre no puede tener más de 100 caracteres.', 'required': 'El nombre es obligatorio.'}, max_length=100, verbose_name='Nombre')),
                ('apellido', models.CharField(error_messages={'max_length': 'El apellido no puede tener más de 100 caracteres.', 'required': 'El apellido es obligatorio.'}, max_length=100, verbose_name='Apellido')),
                ('email', models.EmailField(blank=True, error_messages={'invalid': 'Ingresa una dirección de correo electrónico válida.'}, max_length=254, null=True, verbose_name='Correo electrónico')),
                ('telefono', models.CharField(error_messages={'max_length': 'El teléfono no puede tener más de 20 caracteres.', 'required': 'El teléfono es obligatorio.'}, max_length=20, verbose_name='Teléfono')),
                ('codigo_verificacion', models.CharField(error_messages={'invalid': 'El código debe tener exactamente 4 dígitos.', 'max_length': 'El código no puede tener más de 4 caracteres.', 'required': 'El código de verificación es obligatorio.'}, help_text='Código de 4 dígitos que se usará para validar modificaciones o cancelaciones.', max_length=4, validators=[django.core.validators.RegexValidator('^\\d{4}$', 'El código debe tener exactamente 4 dígitos.')], verbose_name='Código de verificación')),
                ('usuario', models.OneToOneField(blank=True, help_text='Usuario de Django asociado a este cliente', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Usuario asociado')),
            ],
            options={
                'verbose_name': 'Cliente (Legacy)',
                'verbose_name_plural': 'Clientes (Legacy)',
            },
        ),
        migrations.CreateModel(
            name='Turno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_turno', models.CharField(editable=False, max_length=10, unique=True)),
                ('fecha', models.DateField(verbose_name='Fecha del turno')),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PilatesGravity.clase', verbose_name='Clase')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PilatesGravity.cliente', verbose_name='Cliente')),
            ],
            options={
                'verbose_name': 'Turno (Legacy)',
                'verbose_name_plural': 'Turnos (Legacy)',
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_reserva', models.CharField(editable=False, max_length=10, unique=True, verbose_name='Número de reserva')),
                ('fecha_reserva', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de reserva')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Última modificación')),
                ('activa', models.BooleanField(default=True, verbose_name='Reserva activa')),
                ('notas', models.TextField(blank=True, help_text='Notas internas sobre la reserva', verbose_name='Notas adicionales')),
                ('clase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PilatesGravity.clase', verbose_name='Clase')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservas_pilates', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Reserva',
                'verbose_name_plural': 'Reservas',
                'ordering': ['-fecha_reserva'],
                'permissions': [('can_manage_all_reservas', 'Puede gestionar todas las reservas'), ('can_view_all_reservas', 'Puede ver todas las reservas')],
                'unique_together': {('usuario', 'clase')},
            },
        ),
    ]
